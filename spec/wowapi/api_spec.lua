local allFields = {'api', 'impl', 'module', 'returns'}
local allAcceptableFieldCombinations = (function()
  local combinations = {
    autogenerated = {{}},
    implemented = {{'api', 'module'}},
    stub = {{'impl'}, {'returns'}},
    unimplemented = {{}},
  }
  local ret = {}
  for k, v in pairs(combinations) do
    local cl = {}
    for _, c in ipairs(v) do
      local t = {}
      for _, f in ipairs(allFields) do
        t[f] = false
      end
      for _, f in ipairs(c) do
        t[f] = true
      end
      table.insert(cl, t)
    end
    ret[k] = cl
  end
  return ret
end)()

describe('api', function()
  describe('function', function()
    for fn, t in pairs(require('wowapi.loader').loadApis('data/api')) do
      describe(fn, function()
        it('has exactly one implementation', function()
          assert.Not.Nil(t.status, 'missing status')
          local acceptableFieldCombinations = allAcceptableFieldCombinations[t.status]
          assert.Not.Nil(acceptableFieldCombinations, ('invalid status %q'):format(t.status))
          local state = {}
          for _, f in ipairs(allFields) do
            state[f] = not not t[f]
          end
          for _, c in ipairs(acceptableFieldCombinations) do
            if require('luassert.util').deepcompare(state, c) then
              return
            end
          end
          error('invalid field combination')
        end)
        if t.impl and t.tests then
          local impl = t.impl
          for _, test in ipairs(t.tests) do
            (test.pending and pending or it)(test.name, function()
              assert.same(test.outputs, {impl(unpack(test.inputs))})
            end)
          end
        end
      end)
    end
  end)
  describe('file', function()
    local yaml = require('wowapi.yaml')
    local structures = require('wowapi.data').structures
    for filename in require('lfs').dir('data/api') do
      describe(filename, function()
        local str do
          local file = io.open('data/api/' .. filename, 'r')
          str = file:read('*all')
          file:close()
        end
        if filename:sub(-5) == '.yaml' then
          local t = yaml.parse(str)
          it('is formatted correctly', function()
            assert.same(str, yaml.pprint(t))
          end)
          it('has the right name', function()
            assert.same(filename:sub(1, -6), t.name)
          end)
          it('has a valid status', function()
            local valid = {
              autogenerated = true,
              implemented = true,
              stub = true,
              unimplemented = true,
            }
            assert.Not.Nil(t.status, 'missing status')
            assert.True(valid[t.status], ('invalid status %q'):format(t.status))
          end)
          it('has a valid version list', function()
            local valid = {
              Vanilla = true,
              TBC = true,
              Mainline = true,
            }
            if t.versions then
              assert.True(#t.versions > 0, 'empty version list')
              for _, v in ipairs(t.versions) do
                assert.True(valid[v], ('invalid version %q'):format(v))
              end
            end
          end)
          it('has a valid protection', function()
            local valid = {
              hardware = true,
              secure = true,
            }
            assert.True(t.protection == nil or valid[t.protection])
          end)
          it('has valid inputs', function()
            local ty = type(t.inputs)
            if ty == 'table' then
              for _, v in ipairs(t.inputs) do
                assert.True(type(v) == 'string')
              end
            else
              assert.True(ty == 'string' or ty == 'nil')
            end
          end)
          it('has valid outputs', function()
            local fields = {
              mixin = true,
              type = true,
            }
            local types = {
              bool = true,
              ['nil'] = true,
              number = true,
              oneornil = true,
              string = true,
              table = true,
              unknown = true,
            }
            local ty = type(t.outputs)
            if (ty == 'table') then
              for _, v in ipairs(t.outputs) do
                assert.True(type(v) == 'table')
                for k in pairs(v) do
                  assert.True(fields[k])
                end
                local ot = assert(v.type)
                assert.True(type(ot) == 'string')
                assert.truthy(types[ot] or structures[ot], ('invalid type %q'):format(ot))
                assert.True(v.mixin == nil or type(v.mixin) == 'string')
              end
            else
              assert.True(ty == 'nil')
            end
          end)
          it('has no extraneous fields', function()
            local fields = {
              api = true,
              comment = true,
              inputs = true,
              module = true,
              name = true,
              outputs = true,
              protection = true,
              returns = true,
              status = true,
              versions = true,
            }
            for k in pairs(t) do
              assert.True(fields[k], ('unexpected field %q'):format(k))
            end
          end)
        elseif filename:sub(-4) == '.lua' then
          it('loads properly', function()
            local env = { require = require }
            local t = setfenv(loadstring(str), env)()
            assert.same({ require = require }, env)
            assert.True(type(t.impl) == 'function')
            assert.True(t.tests == nil or type(t.tests) == 'table')
            t.impl = nil
            t.tests = nil
            assert.same({}, t)
          end)
        end
      end)
    end
  end)
end)
