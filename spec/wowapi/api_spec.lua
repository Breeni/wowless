local allFields = {'api', 'impl', 'module', 'returns'}
local allAcceptableFieldCombinations = (function()
  local combinations = {
    autogenerated = {{}},
    implemented = {{'api', 'module'}},
    stub = {{'impl'}, {'returns'}},
    unimplemented = {{}},
  }
  local ret = {}
  for k, v in pairs(combinations) do
    local cl = {}
    for _, c in ipairs(v) do
      local t = {}
      for _, f in ipairs(allFields) do
        t[f] = false
      end
      for _, f in ipairs(c) do
        t[f] = true
      end
      table.insert(cl, t)
    end
    ret[k] = cl
  end
  return ret
end)()

describe('api', function()
  describe('function', function()
    for fn, t in pairs(require('wowapi.loader').loadApis('data/api')) do
      describe(fn, function()
        it('has exactly one implementation', function()
          assert.Not.Nil(t.status, 'missing status')
          local acceptableFieldCombinations = allAcceptableFieldCombinations[t.status]
          assert.Not.Nil(acceptableFieldCombinations, ('invalid status %q'):format(t.status))
          local state = {}
          for _, f in ipairs(allFields) do
            state[f] = not not t[f]
          end
          for _, c in ipairs(acceptableFieldCombinations) do
            if require('luassert.util').deepcompare(state, c) then
              return
            end
          end
          error('invalid field combination')
        end)
        if t.impl and t.tests then
          local impl = t.impl
          for _, test in ipairs(t.tests) do
            (test.pending and pending or it)(test.name, function()
              assert.same(test.outputs, {impl(unpack(test.inputs))})
            end)
          end
        end
      end)
    end
  end)
end)
