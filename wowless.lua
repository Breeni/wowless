local bitlib = require('bit')
local datafile = require('datafile')
local handler = require('xmlhandler.dom')
local path = require('path')
local xml2lua = require('xml2lua')

local function readFile(filename)
  local f = assert(io.open(filename:gsub('\\', '/'), 'rb'))
  local content = f:read('*all')
  f:close()
  if content:sub(1, 3) == '\239\187\191' then
    content = content:sub(4)
  end
  return content
end

local function tappend(tbl, arr)
  for _, e in ipairs(arr) do
    table.insert(tbl, e)
  end
  return tbl
end

local loadXml

local function loadLuaString(filename, str)
  return {
    filename = filename,
    lua = assert(loadstring(str)),
  }
end

local function loadFile(filename)
  if filename:sub(-4) == '.lua' then
    return {loadLuaString(filename, readFile(filename))}
  elseif filename:sub(-4) == '.xml' then
    return loadXml(filename)
  else
    error('unknown file type ' .. filename)
  end
end

-- TODO enable xml
local enableXml = true

function loadXml(filename)
  print('working on ' .. filename)
  local dir = path.dirname(filename)
  local h = handler:new()
  h.options.commentNode = false
  xml2lua.parser(h):parse(readFile(filename))
  assert(h.root._name == 'Ui')
  local result = {}
  for _, v in ipairs(h.root._children) do
    assert(v._type == 'ELEMENT')
    if v._name == 'Include' then
      assert(v._attr and v._attr.file and #v._children == 0)
      tappend(result, loadFile(path.join(dir, v._attr.file)))
    elseif v._name == 'Frame' then
      table.insert(result, loadLuaString(filename, string.format([[
        CreateFrame('Frame', nil, %s)
      ]], v._attr.name and ('[[' .. v._attr.name .. ']]') or 'nil')))
    elseif not enableXml then
      print('skipping ' .. filename .. ' ' .. v._name)
    elseif v._name == 'Script' then
      if v._attr and v._attr.file then
        assert(#v._children == 0)
        tappend(result, loadFile(path.join(dir, v._attr.file)))
      elseif v._children then
        for _, x in ipairs(v._children) do
          if x._type == 'TEXT' then
            table.insert(result, loadLuaString(filename, x._text))
          end
        end
      else
        error('invalid script tag')
      end
    end
  end
  return result
end

local function loadToc(toc)
  local dir = path.dirname(toc)
  local result = {}
  for line in io.lines(toc) do
    line = line:match('^%s*(.-)%s*$')
    if line ~= '' and line:sub(1, 1) ~= '#' then
      tappend(result, loadFile(path.join(dir, line)))
    end
  end
  return result
end

local env = setmetatable({
  bit = {
    bor = bitlib.bor,
  },
  getfenv = getfenv,
  getmetatable = getmetatable,
  ipairs = ipairs,
  math = {},
  pairs = pairs,
  rawget = rawget,
  select = select,
  setmetatable = setmetatable,
  string = {
    format = string.format,
    upper = string.upper,
  },
  table = {
    insert = table.insert,
  },
  tostring = tostring,
  type = type,
}, {
  __index = function(t, k)
    if k == '_G' then
      return t
    elseif string.sub(k, 1, 3) == 'LE_' then
      return 'AUTOGENERATED:' .. k
    end
  end
})

setfenv(loadfile('env.lua'), env)()
for _, code in ipairs(loadToc(datafile.path('wowui/classic/FrameXML/FrameXML.toc'))) do
  local success, err = pcall(setfenv(code.lua, env))
  if not success then
    error('failure loading ' .. code.filename .. ': ' .. err)
  end
end
for k, v in pairs(env) do
  print(k .. ' = ' .. tostring(v))
end
