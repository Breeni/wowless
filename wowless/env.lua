local Mixin = require('wowless.util').mixin

local UNIMPLEMENTED = function() end

local uiobjectTypes = {
  actor = {
    inherits = {'parentedobject'},
    intrinsic = true,
    name = 'Actor',
  },
  animationgroup = {
    inherits = {'parentedobject'},
    intrinsic = true,
    name = 'AnimationGroup',
  },
  button = {
    inherits = {'frame'},
    intrinsic = true,
    name = 'Button',
  },
  checkbutton = {
    inherits = {'button'},
    intrinsic = true,
    name = 'CheckButton',
  },
  editbox = {
    inherits = {'frame'},
    intrinsic = true,
    name = 'EditBox',
  },
  font = {
    inherits = {'parentedobject'},
    intrinsic = true,
    name = 'Font',
  },
  fontfamily = {
    inherits = {'parentedobject'},
    intrinsic = true,
    name = 'FontFamily',
  },
  fontstring = {
    inherits = {'parentedobject'},
    intrinsic = true,
    name = 'FontString',
  },
  frame = {
    inherits = {'parentedobject'},
    intrinsic = true,
    mixin = {
      Hide = UNIMPLEMENTED,
      RegisterEvent = UNIMPLEMENTED,
      SetScript = UNIMPLEMENTED,
      SetSize = UNIMPLEMENTED,
    },
    name = 'Frame',
  },
  gametooltip = {
    inherits = {'frame'},
    intrinsic = true,
    name = 'GameTooltip',
  },
  messageframe = {
    inherits = {'frame'},
    intrinsic = true,
    name = 'MessageFrame',
  },
  modelscene = {
    inherits = {'parentedobject'},
    intrinsic = true,
    name = 'ModelScene',
  },
  parentedobject = {
    inherits = {},
    intrinsic = true,
    mixin = {
      SetForbidden = UNIMPLEMENTED,
    },
    name = 'ParentedObject',
  },
  playermodel = {
    inherits = {'parentedobject'},
    intrinsic = true,
    name = 'PlayerModel',
  },
  scrollframe = {
    inherits = {'frame'},
    intrinsic = true,
    name = 'ScrollFrame',
  },
  slider = {
    inherits = {'frame'},
    intrinsic = true,
    name = 'Slider',
  },
  statusbar = {
    inherits = {'frame'},
    intrinsic = true,
    name = 'StatusBar',
  },
  texture = {
    inherits = {'parentedobject'},
    intrinsic = true,
    name = 'Texture',
  },
  worldframe = {
    inherits = {'frame'},
    intrinsic = true,
    name = 'WorldFrame',
  },
}

local function _InheritsFrom(a, b)
  a, b = string.lower(a), string.lower(b)
  while a ~= nil and a ~= b do
    a = uiobjectTypes[a].inherits
  end
  return a ~= nil
end

local function _IsIntrinsicType(t)
  local type = uiobjectTypes[string.lower(t)]
  return type and type.intrinsic
end

local function _IsUIObjectType(t)
  return uiobjectTypes[string.lower(t)] ~= nil
end

local function makeObject(api, type)
  if #type.inherits == 0 then
    return Mixin({}, type.mixin)
  end
  for _, p in ipairs(type.inherits) do
    assert(uiobjectTypes[p], 'unknown object type ' .. p)
  end
  for i = 2, #type.inherits do
    api.log(0, 'ignoring multiple inheritance type ' .. type.inherits[i] .. ' for ' .. tostring(type.name))
  end
  return Mixin(makeObject(api, uiobjectTypes[type.inherits[1]]), type.mixin)
end

local function _CreateUIObject(api, t)
  assert(t.type, 'must specify type for ' .. tostring(t.name))
  local type = uiobjectTypes[string.lower(t.type)]
  assert(type, 'unknown type ' .. t.type .. ' for ' .. tostring(t.name))
  api.log(3, 'creating %s%s%s',
      type.name, t.name and (' named ' .. t.name) or '',
      t.parent and t.parent.virtual and (' with parent ' .. t.parent.name) or '')
  local virtual = t.virtual
  if t.intrinsic then
    assert(not _IsUIObjectType(t.name), 'already a uiobject type named ' .. t.name)
    assert(virtual ~= false, 'intrinsics cannot be explicitly non-virtual: ' .. t.name)
    virtual = true
  end
  local inherits = {}
  for _, inh in ipairs(t.inherits) do
    table.insert(inherits, string.lower(inh))
  end
  if virtual then
    assert(t.name, 'cannot create anonymous virtual uiobject')
    local newtype = {
      inherits = inherits,
      intrinsic = t.intrinsic,
      name = t.name,
    }
    uiobjectTypes[string.lower(t.name)] = newtype
    return nil
  end
  local obj = makeObject(api, type)
  if t.name then
    api.env[t.name] = obj
  end
  return obj
end

local function mkBaseEnv()
  local bitlib = require('bit')
  return setmetatable({
    bit = {
      bor = bitlib.bor,
    },
    getfenv = getfenv,
    getmetatable = getmetatable,
    ipairs = ipairs,
    math = {},
    pairs = pairs,
    rawget = rawget,
    select = select,
    setmetatable = setmetatable,
    string = {
      format = string.format,
      gmatch = string.gmatch,
      gsub = string.gsub,
      lower = string.lower,
      match = string.match,
      sub = string.sub,
      upper = string.upper,
    },
    table = {
      insert = table.insert,
    },
    tostring = tostring,
    type = type,
  }, {
    __index = function(t, k)
      if k == '_G' then
        return t
      elseif string.sub(k, 1, 3) == 'LE_' then
        return 'AUTOGENERATED:' .. k
      end
    end
  })
end

local function mkWowEnv(api)
  return {
    CreateFrame = function(type, name)
      assert(_InheritsFrom(type, 'frame'), type .. ' does not inherit from frame')
      return _CreateUIObject(api, {
        inherits = {},
        name = name,
        type = type,
      })
    end,
    C_Club = {},
    C_GamePad = {},
    C_ScriptedAnimations = {
      GetAllScriptedAnimationEffects = function()
        return {}  -- UNIMPLEMENTED
      end,
    },
    C_Timer = {
      After = UNIMPLEMENTED,
    },
    C_VoiceChat = {},
    C_Widget = {},
    Enum = setmetatable({}, {
      __index = function(_, k)
        return setmetatable({}, {
          __index = function(_, k2)
            return 'AUTOGENERATED:Enum:' .. k .. ':' .. k2
          end,
        })
      end,
    }),
    FillLocalizedClassList = UNIMPLEMENTED,
    format = string.format,
    GetInventorySlotInfo = function()
      return 'UNIMPLEMENTED'
    end,
    GetItemQualityColor = function()
      return 0, 0, 0  -- UNIMPLEMENTED
    end,
    IsGMClient = UNIMPLEMENTED,
    IsOnGlueScreen = UNIMPLEMENTED,
    issecure = UNIMPLEMENTED,
    newproxy = function()
      return setmetatable({}, {})
    end,
    NUM_LE_ITEM_QUALITYS = 10,  -- UNIMPLEMENTED
    RegisterStaticConstants = UNIMPLEMENTED,
    securecall = UNIMPLEMENTED,
    seterrorhandler = UNIMPLEMENTED,
    UnitRace = function()
      return 'Human', 'Human', 1  -- UNIMPLEMENTED
    end,
    UnitSex = function()
      return 2  -- UNIMPLEMENTED
    end,
  }
end

local globalStrings = {
  -- luacheck: no max line length
  CONFIRM_CONTINUE = 'Do you wish to continue?',
  GUILD_REPUTATION_WARNING_GENERIC = 'You will lose one rank of guild reputation with your previous guild.',
  REMOVE_GUILDMEMBER_LABEL = 'Are you sure you want to remove %s from the guild?',
  VOID_STORAGE_DEPOSIT_CONFIRMATION = 'Depositing this item will remove all modifications and make it non-refundable and non-tradeable.',
}

local function new(log)
  local env = mkBaseEnv()
  local api = {
    CreateUIObject = _CreateUIObject,
    env = env,
    IsIntrinsicType = _IsIntrinsicType,
    IsUIObjectType = _IsUIObjectType,
    log = log,
  }
  Mixin(env, mkWowEnv(api), globalStrings)
  return env, api
end

return {
  new = new,
}
